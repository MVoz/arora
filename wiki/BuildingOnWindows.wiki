#summary How to build Arora on Windows and create a working installer.
#labels Phase-Implementation

=Introduction=

Building on Windows is complex and nuanced, and the specifics of the steps will greatly depend on your Windows and software configuration and the particular choices you make for setting up your toolchain. This outline offers instructions on building with Visual C++, and assumes that you already have a working compiler and platform SDK. 

=Details=
==Step 1: OpenSSL==
1. Download and install [http://www.activestate.com/store/download.aspx?prdGUID=81fbce82-6bd5-49bc-a915-08d58c2648ca ActivePerl].
2. Download the OpenSSL [http://www.openssl.org/source/ source], and extract it somewhere. 
3. Build from the Visual C++ command line:
{{{ 
perl_source_directory> perl Configure VC-WIN32
perl_source_directory> ms\do_masm
perl_source_directory> nmake -f ms\ntdll.mak
}}}
_Note: depending on how broken the current OpenSSL release is on Win32, you may have to edit some of the perl build files. This may include adding a few lines to strip out nasty characters, adding defines to headers, or other hackishness. Put on your thinking cap, use google, and figure out how to fix the problems that will most likely occur.

==Step 2: Qt==
1. Download the source of either the latest release of qt or the latest snapshot, and extract it somewhere.
2. Run the configure.exe script with the following options and `nmake` from the Visual C++ command prompt:
{{{
qt_source_directory> configure.exe -release -shared -no-exceptions -webkit -phonon -no-qt3support -no-opengl -openssl -fast
qt_source_directory> nmake
}}}
3. Add `qt_source_directory\bin` to your path in vcvars32 or where ever else you prefer.

==Step 3: Arora==
Download and compile Arora using the s